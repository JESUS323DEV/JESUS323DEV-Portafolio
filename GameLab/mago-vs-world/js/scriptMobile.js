





document.addEventListener("DOMContentLoaded", () => {

    // --- Botones en m√≥viles ---
    let btnAttackMobile = document.getElementById("btnAttackMobile");
    let btnNextTurnoMobile = document.getElementById("btnNextTurnoMobile");

    //FUNCI√ìN ATAQUE JUGADOR
    function atacarMobile() {

        // ---DEFENSA RANDOM DE LA MAQUINA ---
        const defensaSlim = ataques[Math.floor(Math.random() * ataques.length)];

        // radio seleccionado
        let radioSelect = document.querySelector("input[name='ataqueName']:checked");


        if (radioSelect) {
            if (radioSelect && turnoJugador === "jugador") {
                console.log("üßô‚Äç‚ôÇÔ∏è El Mago se prepara para atacar...");

                //al darle click en atacar
                animationBtnAtacar()


                setTimeout(() => {
                    animarAtaqueMago();  // üí• siempre se lanza aqu√≠

                    let ataqueSelect = radioSelect.value;



                    //EMPATE - DA√ëO NORMAL
                    if (ataqueSelect === defensaSlim) {




                        let critico = probCritico();
                        let criticoTotal = critico + criticBuff
                        let da√±oTotal = da√±oNormal + criticoTotal;


                        //RESTA PH DEL DA√ëO TOTAL A LA MAQUINA
                        vidaMaquinaCount -= da√±oTotal;

                        // üî• Mensaje del jugador al log
                        agregarLogJugador("üßô‚Äç‚ôÇÔ∏è El Mago lanz√≥ un ataque de " + ataqueSelect +
                            ". Fue un ataque normal e hizo " + da√±oTotal + " puntos de da√±o a Slim.");


                        //TEXTO DE DA√ëOS M√ÅQUINA
                        agregarLogMaquina("üõ°Ô∏è Slim intent√≥ defenderse con un escudo de " + defensaSlim +
                            ", pero recibi√≥ " + da√±oTotal + " puntos de da√±o.")

                        //mostrar badge da√±o normal
                        document.querySelectorAll("#vidaJugador .efectivo").forEach(dNormal => {
                            dNormal.classList.remove("d-none");
                        });

                        //TEXTO ACTUALIZAR VIDA JUGADOR
                        jugadorVida.textContent = "Vida Actual: " + vidaJugadorCount;
                        barraRellenoJugador.style.width = vidaJugadorCount + "%";

                        //TEXTO ACTUALIZAR VIDA MAQUINA
                        maquinaVida.textContent = "Vida Actual: " + vidaMaquinaCount;
                        barraRellenoMaquina.style.width = vidaMaquinaCount + "%";

                        // Cambiar color seg√∫n la vida
                        vida0()

                        //log
                        console.log("üßô‚Äç‚ôÇÔ∏è MAGO ELIGI√ì ATAQUE DE " + ataqueSelect);
                        console.log("ü§ñüõ°Ô∏è  Maquina eligi√≥ escudo de " + defensaSlim);
                        console.log("üßô‚Äç‚ôÇÔ∏è DA√ëO NORMAL: " + da√±oNormal);

                        console.log("‚ú® Cr√≠tico: " + critico);

                        if (buffMago === "critico") {
                            console.log(
                                "‚ú® Cr√≠tico normal: " +
                                critico +
                                " + Poci√≥n: " +
                                criticBuff +
                                " = Total cr√≠tico: " +
                                (critico + criticBuff)
                            );
                        }
                        console.log("‚öîÔ∏è DA√ëO TOTAL = " + da√±oNormal + " + " + (critico + criticBuff) + " = " + da√±oTotal);
                        console.log("üßô‚Äç‚ôÇÔ∏è Vida jugador ‚Üí " + vidaJugadorCount + " (se mantiene)");
                        console.log("üëæ Vida m√°quina ‚Üí " + vidaMaquinaCount);

                        console.log("==================================================================")


                        //GAnA EL JUGADOR - DA√ëO SUPER-EFECTIVO
                    } else if ((ataqueSelect === "agua" && defensaSlim === "fuego") ||
                        (ataqueSelect === "fuego" && defensaSlim === "planta") ||
                        (ataqueSelect === "planta" && defensaSlim === "agua")) {

                        let critico = probCritico();
                        let criticoTotal = critico + criticBuff
                        let da√±oTotal = da√±oSuperJugador + criticoTotal;



                        //RESTA PH DEL DA√ëO TOTAL A LA MAQUINA
                        vidaMaquinaCount -= da√±oTotal;


                        //TEXTO DE DA√ëOS JUGADOR
                        agregarLogJugador("üßô‚Äç‚ôÇÔ∏è El Mago lanz√≥ un ataque de " + ataqueSelect +
                            ". ¬°Fue S√öPER EFECTIVO! y caus√≥ " + da√±oTotal + " puntos de da√±o a Slim! üí•");

                        //TEXTO DE DA√ëOS M√ÅQUINA
                        agregarLogMaquina("üõ°Ô∏è Slim intent√≥ defenderse con un escudo de " + defensaSlim +
                            ", pero el golpe fue ¬°S√öPER EFECTIVO! y recibi√≥ " + da√±oTotal + " puntos de da√±o.");

                        //da√±os super-efectivo
                        document.querySelectorAll("#vidaJugador .superEfec").forEach(superEffect => {

                            superEffect.classList.remove("d-none");
                        });

                        //TEXTO ACTUALIZAR VIDA Jugador
                        jugadorVida.textContent = "Vida Actual: " + vidaJugadorCount;
                        barraRellenoJugador.style.width = vidaJugadorCount + "%";

                        //TEXTO ACTUALIZAR VIDA MAQUINA
                        maquinaVida.textContent = "Vida Actual: " + vidaMaquinaCount;
                        barraRellenoMaquina.style.width = vidaMaquinaCount + "%";

                        // Cambiar color seg√∫n la vida
                        vida0()


                        ///log
                        console.log("üßô‚Äç‚ôÇÔ∏è MAGO ELIGI√ì ATAQUE DE " + ataqueSelect);
                        console.log("ü§ñüõ°Ô∏è  Maquina eligi√≥ escudo de " + defensaSlim);

                        console.log("üßô‚Äç‚ôÇÔ∏è DA√ëO SUPER-EFECTIVO: " + da√±oSuperJugador);

                        console.log("‚ú® Cr√≠tico: " + critico);

                        if (buffMago === "critico") {
                            console.log(
                                "‚ú® Cr√≠tico normal: " +
                                critico +
                                " + Poci√≥n: " +
                                criticBuff +
                                " = Total cr√≠tico: " +
                                (critico + criticBuff)
                            );
                        }
                        console.log("‚öîÔ∏è F√≥rmula ‚Üí " + da√±oSuperJugador + " + " + (critico + criticBuff) + " = " + da√±oTotal);
                        console.log("üßô‚Äç‚ôÇÔ∏è Vida m√°quina ‚Üí " + vidaMaquinaCount);
                        console.log("üëæ Vida jugador ‚Üí " + vidaJugadorCount + " (se mantiene)");
                        console.log("==================================================================");



                    } else {
                        let critico = probCritico();
                        let criticoTotal = critico + criticBuff
                        let da√±oTotal = da√±oNoEfectivoJugador + criticoTotal;


                        //RESTA PH DEL DA√ëO TOTAL A LA MAQUINA
                        vidaMaquinaCount -= da√±oTotal;

                        //TEXTO DE DA√ëOS JUGADOR

                        agregarLogJugador("üßô‚Äç‚ôÇÔ∏è El Mago lanz√≥ un ataque de " + ataqueSelect +
                            ", pero no fue muy efectivo... solo caus√≥ " + da√±oTotal + " puntos de da√±o.");


                        //TEXTO DE DA√ëOS M√ÅQUINA

                        agregarLogMaquina("üõ°Ô∏è Slim levant√≥ un escudo de " + defensaSlim +
                            " y logr√≥ reducir el da√±o. Solo recibi√≥ " + da√±oTotal + " puntos.");

                        //mostrar da√±o no efectivo
                        document.querySelectorAll("#vidaJugador .noEsEfec").forEach(dNoEffect => {
                            dNoEffect.classList.remove("d-none");
                        });

                        //TEXTO ACTUALIZAR VIDA jugador
                        jugadorVida.textContent = "Vida Actual: " + vidaJugadorCount;
                        barraRellenoJugador.style.width = vidaJugadorCount + "%";


                        //TEXTO ACTUALIZAR VIDA MAQUINA
                        maquinaVida.textContent = "Vida Actual: " + vidaMaquinaCount;
                        barraRellenoMaquina.style.width = vidaMaquinaCount + "%";

                        // Cambiar color seg√∫n la vida
                        vida0()

                        //log
                        console.log("üßô‚Äç‚ôÇÔ∏è MAGO ELIGI√ì ATAQUE DE " + ataqueSelect);
                        console.log("ü§ñüõ°Ô∏è  Maquina eligi√≥ escudo de " + defensaSlim);

                        console.log("üßô‚Äç‚ôÇÔ∏è DA√ëO BAJO: " + da√±oNoEfectivoJugador);
                        console.log("‚ú® Cr√≠tico: " + critico);

                        if (buffMago === "critico") {
                            console.log(
                                "‚ú® Cr√≠tico normal: " +
                                critico +
                                " + Poci√≥n: " +
                                criticBuff +
                                " = Total cr√≠tico: " +
                                (critico + criticBuff)
                            );
                        }

                        console.log("‚öîÔ∏è F√≥rmula ‚Üí " + da√±oNoEfectivoJugador + " + " + (critico + criticBuff) + " = " + da√±oTotal);
                        console.log("üßô‚Äç‚ôÇÔ∏è Vida m√°quina ‚Üí " + vidaMaquinaCount);
                        console.log("üëæ Vida jugador ‚Üí " + vidaJugadorCount + " (se mantiene)");
                        console.log("==================================================================");
                    }









                    turnoJugador = "maquina"
                    btnAttack.disabled = true;
                    btnNextTurno.disabled = false;
                    radioSelect.checked = false;
                    mostrarEscudos()
                    ocultarDa√±osMaquina()
                    ganaMago()


                }, 2000);




            }
        }


    }


    //FUNCI√ìN ATAQUE MAQUINA
    function defenderseMobile() {

        animarAtaqueSlime()
        animationBtnDefensa()

        setTimeout(() => {

            console.log("ü§ñ La maquina esta pensado...")

            //ATAQUE RANDOM SLIM
            const ataqueSlim = ataques[Math.floor(Math.random() * ataques.length)];

            //FUNCI√ìN ELEGIR ESCUDOS
            let defensaMago = document.querySelector("input[name='ataqueName']:checked");

            if (defensaMago) {
                defensaMago = defensaMago.value;
            } else {

                alert("selecciones un escudo")
                return;

            }




            //DA√ë√ì NORMAL DEL SLIM
            if (ataqueSlim === defensaMago) {

                let critico = probCritico() + criticBuffMaquina;
                let da√±oTotal = da√±oNormal + critico;


                //RESTA PH DEL DA√ëO TOTAL AL JUGADOR
                vidaJugadorCount -= da√±oTotal;

                //TEXTO MAQUINA
                agregarLogMaquina("üëæ Slim lanz√≥ un ataque de " + ataqueSlim +
                    ". Fue un golpe normal e hizo " + da√±oTotal + " puntos de da√±o al Mago.");
                //TEXTO JUGADOR
                agregarLogJugador("üõ°Ô∏è El Mago levant√≥ un escudo de " + defensaMago +
                    " y redujo el impacto. Solo recibi√≥ " + da√±oTotal + " puntos de da√±o.");

                //mostrar da√±os maquina
                document.querySelectorAll("#vidaMaquina .efectivo").forEach(dNormal => {

                    dNormal.classList.remove("d-none")
                })

                //TEXTO ACTUALIZAR VIDA MAQUINA
                maquinaVida.textContent = "Vida Actual: " + vidaMaquinaCount;
                barraRellenoMaquina.style.width = vidaMaquinaCount + "%";

                //TEXTO ACTUALIZAR VIDA JUGADOR
                jugadorVida.textContent = "Vida Actual: " + vidaJugadorCount;
                barraRellenoJugador.style.width = vidaJugadorCount + "%";

                // Cambiar color seg√∫n la vida
                vida0()

                //LOG
                console.log("üëæ SLIM ELIGI√ì ATAQUE DE " + ataqueSlim);
                console.log("üßô‚Äç‚ôÇÔ∏èüõ°Ô∏è la defensa del mago es " + defensaMago);


                console.log("üëæ Da√±o NORMAL de Slim: " + da√±oNormal);
                console.log("‚ú® Cr√≠tico: " + critico);
                console.log("‚öîÔ∏è F√≥rmula ‚Üí " + da√±oNormal + " + " + critico + " = " + da√±oTotal);

                console.log("üßô‚Äç‚ôÇÔ∏è Vida jugador (despu√©s del ataque) ‚Üí " + vidaJugadorCount);
                console.log("üëæ Vida m√°quina ‚Üí " + vidaMaquinaCount + " (se mantiene)");
                console.log("==================================================================")


                //DA√ëO SUPER-EFECTIVO
            } else if ((ataqueSlim === "agua" && defensaMago === "fuego") ||
                (ataqueSlim === "fuego" && defensaMago === "planta") ||
                (ataqueSlim === "planta" && defensaMago === "agua")) {

                let critico = probCritico() + criticBuffMaquina;
                let da√±oTotal = da√±oSuperMaquina + critico;

                //RESTA PH DEL DA√ëO TOTAL AL JUGADOR
                vidaJugadorCount -= da√±oTotal;

                //TEXTO MAQUINA 
                agregarLogMaquina("üëæ Slim desat√≥ un ataque de " + ataqueSlim +
                    " ¬°Fue S√öPER EFECTIVO! El Mago recibi√≥ " + da√±oTotal + " puntos de da√±o. üí•");

                //TEXTO JUGADOR
                agregarLogJugador("üõ°Ô∏è El Mago intent√≥ protegerse con un escudo de " + defensaMago +
                    ", pero el golpe fue ¬°S√öPER EFECTIVO! Recibi√≥ " + da√±oTotal + " puntos de da√±o.");

                //mostrar da√±os maquina
                document.querySelectorAll("#vidaMaquina .superEfec").forEach(superEffect => {

                    superEffect.classList.remove("d-none")
                })

                //TEXTO ACTUALIZAR VIDA MAQUINA
                maquinaVida.textContent = "Vida Actual: " + vidaMaquinaCount;
                barraRellenoMaquina.style.width = vidaMaquinaCount + "%";

                //TEXTO ACTUALIZAR VIDA JUGADOR
                jugadorVida.textContent = "Vida Actual: " + vidaJugadorCount;
                barraRellenoJugador.style.width = vidaJugadorCount + "%";

                // Cambiar color seg√∫n la vida
                vida0()

                //LOG
                console.log("üëæ SLIM ELIGI√ì ATAQUE DE " + ataqueSlim);
                console.log("üßô‚Äç‚ôÇÔ∏èüõ°Ô∏è la defensa del mago es " + defensaMago);
                console.log("üëæ Da√±o SUPER EFECTIVO: " + da√±oSuperMaquina);
                console.log("‚ú® Cr√≠tico: " + critico);


                console.log("üßô‚Äç‚ôÇÔ∏è Vida del Mago (despu√©s del ataque) ‚Üí " + vidaJugadorCount);
                console.log("üëæ Vida de Slim ‚Üí " + vidaMaquinaCount + " (se mantiene)");

                console.log("==================================================================")



            } else {

                let critico = probCritico() + criticBuffMaquina;
                let da√±oTotal = da√±oNoEfectivoMaquina + critico;

                //RESTA PH DEL DA√ëO TOTAL A LA MAQUINA
                vidaJugadorCount -= da√±oTotal;

                //TEXT MAQUINA
                agregarLogMaquina("üëæ Slim atac√≥ con " + ataqueSlim +
                    ", pero no fue muy efectivo... El Mago solo recibi√≥ " + da√±oTotal + " puntos de da√±o.");
                //TEXT JUGADOR
                agregarLogJugador("üõ°Ô∏è El Mago levant√≥ un escudo de " + defensaMago +
                    ". El ataque no fue muy efectivo y solo recibi√≥ " + da√±oTotal + " puntos de da√±o.");

                //mostrar da√±os maquina
                document.querySelectorAll("#vidaMaquina .noEsEfec").forEach(dNoEffect => {

                    dNoEffect.classList.remove("d-none")
                })

                //TEXTO ACTUALIZAR VIDA MAQUINA
                maquinaVida.textContent = "Vida Actual: " + vidaMaquinaCount;
                barraRellenoMaquina.style.width = vidaMaquinaCount + "%";

                //TEXTO ACTUALIZAR VIDA JUGADOR
                jugadorVida.textContent = "Vida Actual: " + vidaJugadorCount;
                barraRellenoJugador.style.width = vidaJugadorCount + "%";


                // Cambiar color seg√∫n la vida
                vida0()



                //LOG

                console.log("üëæ SLIM ELIGI√ì ATAQUE DE " + ataqueSlim);
                console.log("üßô‚Äç‚ôÇÔ∏èüõ°Ô∏è la defensa del mago es " + defensaMago);
                console.log("üëæ DA√ëO NO EFECTIVO: " + da√±oNoEfectivoMaquina);
                console.log("‚ú® Cr√≠tico: " + critico);
                console.log("‚öîÔ∏è F√≥rmula ‚Üí " + da√±oNoEfectivoMaquina + " + " + critico + " = " + da√±oTotal);

                console.log("üßô‚Äç‚ôÇÔ∏è Vida jugador (despu√©s del ataque) ‚Üí " + vidaJugadorCount);
                console.log("üëæ Vida Slim ‚Üí " + vidaMaquinaCount + " (se mantiene)");
                console.log("==================================================================")



            }

            turnoJugador = "jugador"

            btnAttack.disabled = false;
            btnNextTurno.disabled = true;

            cpuGana();
            mostrarAtaques()
            document.querySelectorAll("input[name='ataqueName']").forEach(radio => {
                radio.checked = false;
            });
            ocultarDa√±osJugador();


        }, 2000);

    }

    // --- Eventos ---
    btnAttackMobile?.addEventListener("click", atacarMobile);
    btnNextTurnoMobile?.addEventListener("click", defenderseMobile);

})